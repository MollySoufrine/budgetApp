{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","useState","useIncome","setIncome","useExpense","setExpense","useEffect","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.347de631.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => {\n  return <h2>Expense Tracker</h2>;\n};\n","export default (state, action) => {\n  switch (\n    action.type //switch based on a type\n  ) {\n    //checking the actions type\n    case \"DELETE_TRANSACTION\":\n      return {\n        //change your state, create a new state and send it down because we cant just change it\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction.id !== action.payload\n        ),\n        //return all the transactions excpet the one with the id that was deleted\n      };\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions],\n      };\n    //return transactions that are already there in addtion to the enw one\n    default:\n      // when default just return state as is\n      return state;\n  }\n};\n\n//state \"hovers\" over components which you use to change/send down to your state\n//actions can be used to call to send up\n","//where we will create context\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\n\n//set initial state\nconst initialState = {\n  transactions: [\n    //made this an empty array so you can add / subrtract whatever youd like to it\n  ],\n  //exp is negative num, inc is pos number\n};\n\n/*\nany global state will go in that obj above.\nas long as we have access to the transactions in certain components we can do our calculations\nwe just need to pass the data down then we will have actions to delete/add from/to the state\n*/\n\n//create context\nexport const GlobalContext = createContext(initialState);\n// in order for other components to have access to our state we need a provider\n\n//Provoder component\n//we want our components wrapped in a provider, this makes them children, so we destrcuture and pass in children\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  //passing reducer into useReducer, accessing state values and passing it into our provdier\n  //using reducer we want state and dispatch\n\n  //action to make call to reducer\n  function deleteTransaction(id) {\n    //takes in an id so we know which to delete\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id, //data we want to send to it which in this case is the I.D\n    });\n    //dispatching an action with a type and a payload\n  }\n\n  //making another action to add a transaction\n  //action to make call to reducer\n  function addTransaction(transaction) {\n    //takes in an id so we know which to delete\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction, //data we want to send to it which in this case is the I.D\n    });\n    //dispatching an action with a type and a payload\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        //passing deletetranscation down so we can use it\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n//we pass the provider an obj. using state. allows you to access anything in the obj. and we want to access the transactions here\n//this allows us to access transaction from any component with useContext\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nexport const Balance = () => {\n  const { transactions } = useContext(GlobalContext);\n  const amounts = transactions.map((transaction) => transaction.amount);\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n  //using reduce to calc total/add them together and toFixed to get 2 decimal places\n\n  return (\n    //got rid of the div and just using a fragment\n    <>\n      <h4>Your Balance</h4>\n      <h1 id=\"balance\">${total}</h1>\n    </>\n  );\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nexport const IncomeExpenses = () => {\n  const { transactions } = useContext(GlobalContext);\n  const amounts = transactions.map((transaction) => transaction.amount);\n\n  const income = amounts\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = (\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n  ).toFixed(2);\n\n  const [useIncome, setIncome] = useState(income);\n  const [useExpense, setExpense] = useState(expense);\n\n  useEffect(() => {\n    setExpense(expense);\n    setIncome(income);\n  }, [expense, income]);\n\n  return (\n    <div className=\"inc-exp-container\">\n      <div>\n        <h4>Income</h4>\n        <p id=\"money-plus\" className=\"money plus\">\n          ${useIncome}\n        </p>\n      </div>\n      <div>\n        <h4>Expense</h4>\n        <p id=\"money-minus\" className=\"money minus\">\n          ${useExpense}\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\n//since transaction is a prop here we must pass in a prop to the function, we can destructure and use ({transaction}) or just use props and props.text\nexport const Transaction = ({ transaction }) => {\n  const { deleteTransaction } = useContext(GlobalContext);\n\n  const sign = transaction.amount < 0 ? \"-\" : \"+\";\n  //ternary op to detect if amount is less than 0 its negative/exp, otherwise its pos and an inc\n  return (\n    //going to make the className dynamic\n    //ternary op again, if we have a class of minus, the border will be red, else if its pos the border is green\n    <li className={transaction.amount < 0 ? \"minus\" : \"plus\"}>\n      {transaction.text}\n      <span>\n        {sign}${Math.abs(transaction.amount)}\n        {/* this is wrapped in math.abs so that two negative signs do not show up */}\n      </span>\n      <button\n        onClick={() => deleteTransaction(transaction.id)}\n        className=\"delete-btn\"\n      >\n        x\n      </button>\n    </li>\n  );\n};\n//we need to write a function to recognize the sign + or -\n","import React, { useContext } from \"react\";\nimport { Transaction } from \"./Transaction\";\nimport { GlobalContext } from \"../context/GlobalState\";\nexport const TransactionList = () => {\n  const { transactions } = useContext(GlobalContext);\n  return (\n    <>\n      <h3>History</h3>\n      <ul id=\"list\" className=\"list\">\n        {transactions.map((transaction) => (\n          //loop/mapping through transactions because its an array\n          <Transaction key={transaction.id} transaction={transaction} />\n          //bringing it in from globalstate/context mapping through, rendering a transaction component for each one and pass in a prop. must have a unique key.\n        ))}\n      </ul>\n    </>\n  );\n};\n//bringing it in from globalcontext, map through, then render a component for each and pass in a prop\n//mapping through this way, creates or is called a list and must have a unique key\n","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nexport const AddTransaction = () => {\n  //added a hook for the input of the form, when a value is added it will be updated\n  const [text, setText] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n\n  const { addTransaction } = useContext(GlobalContext);\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const newTransaction = {\n      id: Math.floor(Math.random() * 1000000000),\n      text,\n      amount: +amount,\n      //adding the plus sign to amount should turn it into a number from a string which should solve our toFixed error\n    };\n    addTransaction(newTransaction);\n  };\n  return (\n    <>\n      <h3>Add a New Transaction!</h3>\n      <form id=\"form\" onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            id=\"text\"\n            placeholder=\"Enter Text Here\"\n          />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\">\n            Amount\n            <br />\n            (negative- expense, positive - income\n          </label>\n          <input\n            type=\"number\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n            id=\"amount\"\n            placeholder=\"Enter Amount\"\n          />\n        </div>\n        <button className=\"btn\">Add Transaction</button>\n      </form>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { Balance } from \"./components/Balance\";\nimport { IncomeExpenses } from \"./components/IncomeExpenses\";\nimport { TransactionList } from \"./components/TransactionList\";\nimport { AddTransaction } from \"./components/AddTransaction\";\n\nimport { GlobalProvider } from \"./context/GlobalState\";\n//using curly braces around the components to import them because they do not have an export default, we are using a const export\nimport \"./App.css\";\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}